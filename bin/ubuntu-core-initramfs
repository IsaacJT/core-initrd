#!/usr/bin/python3
import argparse
import os
import subprocess
import tempfile


def create_initrd(args):
    if args.root:
        args.skeleton = os.path.join(args.root, args.skeleton)
        args.kerneldir = os.path.join(args.root, args.kerneldir)
        args.firmwaredir = os.path.join(args.root, args.firmwaredir)
        args.output = os.path.join(args.root, args.output)
    if args.kernelver:
        args.output = "-".join([args.output, args.kernelver])
    with tempfile.TemporaryDirectory(suffix=".ubuntu-core-initramfs") as d:
        main = os.path.join(d, "main")
        kvdir = os.path.join(args.kerneldir, args.kernelver)
        subprocess.check_call(["cp", "-ar", "%s/main" % args.skeleton, d])
        # Should itirate all the .conf drop ins
        with open(
            os.path.join(main, "usr/lib/modules-load.d/ubuntu-core-initramfs.conf")
        ) as f:
            for module in f.readlines():
                module = module.strip()
                if module:
                    if module[0] in ["#", ";"]:
                        continue
                    subprocess.check_call(
                        [
                            "/usr/lib/dracut/dracut-install",
                            "-D",
                            main,
                            "--kerneldir",
                            kvdir,
                            "--firmwaredirs",
                            args.firmwaredir,
                            "--module",
                            "--optional",
                            module,
                        ]
                    )

        subprocess.check_call(
            [
                "/usr/lib/dracut/dracut-install",
                "-D",
                main,
                "--all",
                os.path.join(kvdir, "modules.order"),
                os.path.join(kvdir, "modules.builtin"),
                os.path.join(kvdir, "modules.builtin.bin"),
                os.path.join("/usr/lib/modules", args.kernelver),
            ]
        )
        subprocess.check_call(["depmod", "-a", "-b", main, args.kernelver])
        with open(args.output, "w") as output:
            subprocess.check_call(
                "find . | cpio --create --quiet --format='newc' --owner=0:0 | lz4 -9 -l",
                cwd=main,
                shell=True,
                stdout=output,
            )


def create_efi(args):
    if args.root:
        args.stub = os.path.join(args.root, args.stub)
        args.kernel = os.path.join(args.root, args.kernel)
        args.initrd = os.path.join(args.root, args.initrd)
        args.output = os.path.join(args.root, args.output)
    if args.kernelver:
        args.kernel = "-".join([args.kernel, args.kernelver])
        args.initrd = "-".join([args.initrd, args.kernelver])
        args.output = "-".join([args.output, args.kernelver])
    subprocess.check_call(
        [
            "objcopy",
            "--add-section",
            ".linux=%s" % args.kernel,
            "--change-section-vma",
            ".linux=0x40000",
            "--add-section",
            ".initrd=%s" % args.initrd,
            "--change-section-vma",
            ".initrd=0x3000000",
            args.stub,
            args.output,
        ]
    )
    os.chmod(args.output, 0o600)


def main():
    kernelver = subprocess.check_output(
        ["uname", "-r"], universal_newlines=True
    ).strip()
    parser = argparse.ArgumentParser()
    subparser = parser.add_subparsers(dest="subcmd", required=True)
    efi_parser = subparser.add_parser(
        "create-efi", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    efi_parser.add_argument("--root", help="path to root", default="")
    efi_parser.add_argument(
        "--stub",
        help="path to stub",
        default="/usr/lib/ubuntu-core-initramfs/efi/linuxx64.efi.stub",
    )
    efi_parser.add_argument("--kernel", help="path to kernel", default="/boot/vmlinuz")
    efi_parser.add_argument(
        "--kernelver", help="kernel version suffix", default=kernelver
    )
    efi_parser.add_argument(
        "--initrd", help="path to initramfs", default="/boot/ubuntu-core-initramfs.img"
    )
    efi_parser.add_argument(
        "--output", help="path to output", default="/boot/kernel.efi"
    )
    initrd_parser = subparser.add_parser(
        "create-initrd", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    initrd_parser.add_argument("--root", help="path to root", default="")
    initrd_parser.add_argument(
        "--skeleton", help="path to skeleton", default="/usr/lib/ubuntu-core-initramfs"
    )
    initrd_parser.add_argument(
        "--kerneldir", help="path to kernel modules", default="/lib/modules"
    )
    initrd_parser.add_argument("--kernelver", help="kernel version", default=kernelver)
    initrd_parser.add_argument(
        "--firmwaredir", help="path to kernel firmware", default="/lib/firmware"
    )
    initrd_parser.add_argument(
        "--output", help="path to output", default="/boot/ubuntu-core-initramfs.img"
    )
    initrd_parser.set_defaults(
        kernelver=subprocess.check_output(
            ["uname", "-r"], universal_newlines=True
        ).strip()
    )

    args = parser.parse_args()
    globals()[args.subcmd.replace("-", "_")](args)


if __name__ == "__main__":
    main()
