#!/usr/bin/python3
import argparse
import os
import subprocess
import tempfile
import pathlib
import platform
import glob
import shutil


# os.path.join() throws away previous components when it finds one
# that is an absolute path - we do not want that when using --root as
# many defaults are absolute, so we use this function to make second
# and later paths relative.
def path_join_make_rel_paths(path, *paths):
    relative_paths = []
    for p in paths:
        relative_paths.append(os.path.relpath(os.path.join('/', p), '/'))
    return os.path.join(path, *relative_paths)


# Include kernel modules specified in conf_file
def add_modules_from_file(dest_d, kernel_root, modules_d, fw_d, conf_file):
    with open(conf_file) as f:
        for module in f.readlines():
            module = module.strip()
            if module:
                if module[0] in ["#", ";"]:
                    continue
                subprocess.check_call(
                    [
                        "/usr/lib/dracut/dracut-install",
                        "-D",
                        dest_d,
                        "-r", kernel_root,
                        "--kerneldir",
                        modules_d,
                        "--firmwaredirs",
                        fw_d,
                        "--module",
                        "--optional",
                        module,
                    ]
                )


def create_initrd(parser, args):
    if not args.kerneldir:
        args.kerneldir = "/lib/modules/%s" % args.kernelver
    if args.root:
        args.skeleton = path_join_make_rel_paths(args.root, args.skeleton)
        args.kerneldir = path_join_make_rel_paths(args.root, args.kerneldir)
        args.firmwaredir = path_join_make_rel_paths(args.root, args.firmwaredir)
        args.output = path_join_make_rel_paths(args.root, args.output)
    if args.kernelver:
        args.output = "-".join([args.output, args.kernelver])
    with tempfile.TemporaryDirectory(suffix=".ubuntu-core-initramfs") as d:
        kernel_root = os.path.join(d, "kernel")
        modules = os.path.join(kernel_root, "usr", "lib", "modules")
        os.makedirs(modules, exist_ok=True)
        modules = os.path.join(modules, args.kernelver)
        subprocess.check_call(["cp", "-ar", args.kerneldir, modules])

        firmware = os.path.join(kernel_root, "usr", "lib", "firmware")
        subprocess.check_call(["cp", "-ar", args.firmwaredir, firmware])

        main = os.path.join(d, "main")
        os.makedirs(main, exist_ok=True)
        for feature in args.features:
            # Needs https://github.com/snapcore/snapd/pull/10351 to land
            if feature == "cloudimg-rootfs":
                os.unlink(os.path.join(main, "usr/lib/systemd/system/sysroot.mount"))
            # Add feature files
            feature_path = os.path.join(args.skeleton, feature)
            if os.path.isdir(feature_path):
                subprocess.check_call(["cp", "-aT", feature_path, main])
            # Add feature kernel modules
            extra_modules = os.path.join(args.skeleton, "modules", feature,
                                         "extra-modules.conf")
            if os.path.exists(extra_modules):
                add_modules_from_file(main, kernel_root, modules, firmware, extra_modules)

        # Update epoch
        pathlib.Path("%s/main/usr/lib/clock-epoch" % d).touch()
        # Should iterate all the .conf drop ins
        for module_load in glob.iglob("%s/usr/lib/modules-load.d/*.conf" % main):
            add_modules_from_file(main, kernel_root, modules, firmware, module_load)

        for modulesf in ["modules.order", "modules.builtin", "modules.builtin.bin"]:
            subprocess.check_call(
                [
                    "/usr/lib/dracut/dracut-install",
                    "-D",
                    main,
                    "-r", kernel_root,
                    os.path.join(modules, modulesf),
                    os.path.join("usr/lib/modules", args.kernelver, modulesf),
                ]
            )
        subprocess.check_call(["depmod", "-a", "-b", main, args.kernelver])
        with open(args.output, "wb") as output:
            for early in glob.iglob("%s/early/*.cpio" % args.skeleton):
                with open(early, "rb") as f:
                    shutil.copyfileobj(f, output)
            output.write(
                subprocess.run(
                    "find . | cpio --create --quiet --format='newc' --owner=0:0 | zstd -1 -T0",
                    cwd=main,
                    capture_output=True,
                    shell=True,
                    check=True,
                ).stdout)


def create_efi(parser, args):
    if not args.stub:
        parser.error("--stub is required, and one was not automatically detected")
    if args.root:
        args.stub = path_join_make_rel_paths(args.root, args.stub)
        args.sbat = path_join_make_rel_paths(args.root, args.sbat)
        args.kernel = path_join_make_rel_paths(args.root, args.kernel)
        args.initrd = path_join_make_rel_paths(args.root, args.initrd)
        args.key = path_join_make_rel_paths(args.root, args.key)
        args.cert = path_join_make_rel_paths(args.root, args.cert)
        args.output = path_join_make_rel_paths(args.root, args.output)
    if args.kernelver:
        args.kernel = "-".join([args.kernel, args.kernelver])
        args.initrd = "-".join([args.initrd, args.kernelver])
        args.output = "-".join([args.output, args.kernelver])

    # kernel.efi sections will be aligned to the page size by llvm-objcopy
    # (which is the default value for SectionAlignment in the PE header).
    # --set-section-flags are such so added COFF sections have flags:
    # CONTENTS, ALLOC, LOAD, READONLY, DATA
    # (see llvm-objcopy man page for details)
    # To see more details, run 'objdump --all-headers kernel.efi'
    # (objdump gives a bit more of information than llvm-objdump in this case)
    objcopy_cmd = [
            "llvm-objcopy",
        ]
    # TODO add .osrel
    if args.cmdline:
        cmdline = tempfile.NamedTemporaryFile(mode='w')
        cmdline.write('%s' % args.cmdline)
        cmdline.flush()
        objcopy_cmd += [
            "--add-section", ".cmdline=%s" % cmdline.name,
            "--set-section-flags", ".cmdline=readonly,data",
            ]
    # TODO add .splash
    objcopy_cmd += [
            "--add-section", ".sbat=%s" % args.sbat,
            "--set-section-flags", ".sbat=readonly,data",
            "--add-section", ".linux=%s" % args.kernel,
            "--set-section-flags", ".linux=readonly,data",
            "--add-section", ".initrd=%s" % args.initrd,
            "--set-section-flags", ".initrd=readonly,data",
            args.stub,
            args.output,
        ]
    subprocess.check_call(objcopy_cmd)
    if not args.unsigned:
        subprocess.check_call(
            [
                "sbsign",
                "--key",
                args.key,
                "--cert",
                args.cert,
                "--output",
                args.output,
                args.output,
            ]
        )
    os.chmod(args.output, 0o600)


def main():
    kernelver = subprocess.check_output(
        ["uname", "-r"], universal_newlines=True
    ).strip()
    suffix = {"x86_64": "x64",
              "aarch64": "aa64",
              "arm": "arm",
              "riscv64": "riscv64"}.get(platform.machine())
    features = {"x86_64": "main server"}.get(platform.machine(), "main")
    parser = argparse.ArgumentParser()
    subparser = parser.add_subparsers(dest="subcmd", required=True)
    efi_parser = subparser.add_parser(
        "create-efi", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    efi_parser.add_argument("--root", help="path to root")
    efi_parser.add_argument("--stub", help="path to stub")
    efi_parser.add_argument("--sbat", help="path to sbat",
                            default="/usr/lib/ubuntu-core-initramfs/efi/sbat.txt")
    if suffix:
        efi_parser.set_defaults(
            stub="/usr/lib/ubuntu-core-initramfs/efi/linux%s.efi.stub" % suffix
        )
    efi_parser.add_argument("--kernel", help="path to kernel", default="/boot/vmlinuz")
    efi_parser.add_argument(
        "--kernelver", help="kernel version suffix", default=kernelver
    )
    efi_parser.add_argument(
        "--initrd", help="path to initramfs", default="/boot/ubuntu-core-initramfs.img"
    )
    efi_parser.add_argument(
        "--cmdline", help="commandline to embed (can be overriden with LoadOptions)"
    )
    efi_parser.add_argument(
        "--unsigned", help="do not sign efi app", default=False, action="store_true"
    )
    efi_parser.add_argument(
        "--key",
        help="signing key",
        default="/usr/lib/ubuntu-core-initramfs/snakeoil/PkKek-1-snakeoil.key",
    )
    efi_parser.add_argument(
        "--cert",
        help="certificate",
        default="/usr/lib/ubuntu-core-initramfs/snakeoil/PkKek-1-snakeoil.pem",
    )
    efi_parser.add_argument(
        "--output", help="path to output", default="/boot/kernel.efi"
    )
    initrd_parser = subparser.add_parser(
        "create-initrd", formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    initrd_parser.add_argument("--root", help="path to root", default="")
    initrd_parser.add_argument(
        "--skeleton", help="path to skeleton", default="/usr/lib/ubuntu-core-initramfs"
    )
    initrd_parser.add_argument(
        "--feature",
        dest="features",
        help="list of features to enable, if unspecified defaults to %s" % features,
        nargs="+"
    )
    initrd_parser.add_argument(
        "--kerneldir", help="path to kernel modules dir default /lib/modules/KERNELVER"
    )
    initrd_parser.add_argument("--kernelver", help="kernel version", default=kernelver)
    initrd_parser.add_argument(
        "--firmwaredir", help="path to kernel firmware", default="/lib/firmware"
    )
    initrd_parser.add_argument(
        "--output", help="path to output", default="/boot/ubuntu-core-initramfs.img"
    )
    initrd_parser.set_defaults(
        kernelver=subprocess.check_output(
            ["uname", "-r"], universal_newlines=True
        ).strip()
    )

    args = parser.parse_args()
    if args.subcmd == "create-initrd" and not args.features:
        # Set arch specific default set of features
        args.features = features.split()
        # For generic kernels, enable more server drivers too
        if args.kernelver.endswith("-generic") and "server" not in args.features:
            args.features.append("server")
    globals()[args.subcmd.replace("-", "_")](parser, args)


if __name__ == "__main__":
    main()
